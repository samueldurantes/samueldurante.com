---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import path from 'path';
import simpleGit, { type DefaultLogFields, type ListLogLine } from 'simple-git';
import dayjs from 'dayjs';

import Link from '../../../components/Link.astro';
import Layout from '../../../layout/Layout.astro';
import { SITE } from '../../../config';

type GitLogCommit = DefaultLogFields & ListLogLine;

interface Props {
  post: CollectionEntry<'blog'>;
  lastCommit: GitLogCommit | null;
}

export const prerender = true;

export async function getStaticPaths() {
  const git = simpleGit();
  const posts = await getCollection('blog');

  const postsMapped = posts.map(async (post) => {
    const file = path.join(process.cwd(), 'src', 'content', 'blog', post.id);

    let lastCommit: GitLogCommit | null = null;

    try {
      const log = await git.log({ file });

      lastCommit = log.latest;
    } catch (error) {
      console.log('Error when trying to get last commit', error);
    }

    return {
      params: {
        slug: post.slug,
      },
      props: {
        lastCommit,
        post,
      },
    };
  });

  return Promise.all(postsMapped);
}

const { post, lastCommit } = Astro.props;
const { Content } = await post.render();
---

<Layout
  ogImage={`/${post.slug}.png`}
  head={{ title: `${post.data.title} | ${SITE.title}` }}
>
  <section class="header">
    <h1>
      {post.data.title}
    </h1>
    <section>
      <p style={{ display: 'flex', gap: '5px' }}>
        <strong>Created at:</strong>
        <span>
          {dayjs(post.data.createdAt).format('YYYY-MM-DD')}
        </span>
      </p>
      {
        lastCommit ? (
          <p style={{ display: 'flex', gap: '5px' }}>
            <strong>Last updated at:</strong>
            <span>
              {dayjs(lastCommit.date).format('YYYY-MM-DD HH:mm')}
              <span>
                (<Link
                href={`https://github.com/samueldurantes/blog/commit/${lastCommit.hash.slice(0, 7)}`}
                isExternal
              >
                {lastCommit.hash.slice(0, 7).trim()}
              </Link>)
              </span>
            </span>
          </p>
        ) : null
      }
    <section class="tags">
      <strong>Tags:</strong>
      {
        post.data.tags.map((tag: string) => (
          <Link href={`/tag/${tag}`}>
            <p>#{tag}</p>
          </Link>
        ))
      }
    </section>
    </section>
  </section>
  <article>
    <Content />
  </article>
</Layout>

<style is:global>
  article {
    display: flex;
    flex-direction: column;
    row-gap: var(--spacing-2x);
  }

  article ul {
    display: flex;
    flex-direction: column;
    gap: var(--spacing);
    padding-right: var(--spacing-2x);
  }

  article li {
    margin-left: var(--spacing-2x);
  }

  article ol li {
    list-style-type: decimal;
    margin-left: var(--spacing-4x);
  }

  article ul li {
    list-style-type: disc;
  }

  article code {
    background-color: rgb(243 244 246);
    padding: 0.15rem;
    border-radius: 0.15rem;
  }

  article img {
    width: 100%;
  }

  article blockquote {
    border-left: 4px solid #c1c1c1;
    padding-left: 1rem;
  }

  .header {
    display: flex;
    flex-direction: column;
    row-gap: var(--spacing-2x);
  }

  .tags {
    display: flex;
    align-items: center;
    column-gap: var(--spacing);
  }

  [data-rehype-pretty-code-title] {
    background-color: rgb(243 244 246);
    color: var(--color-white);
    padding: var(--spacing);
  }

  [data-rehype-pretty-code-figure] code {
    background-color: transparent;
    border: 1px solid #24292e;
    color: var(--color-white);
    padding: var(--spacing);
    font-size: var(--font-size-md);
    overflow-x: scroll;
  }

  /* TODO: Why KaTeX are duplicating the code. */
  .katex-html {
    display: none;
  }
</style>
